//* Licensed Materials - Property of IBM, Miracle A/S, and            *
//* Alexandra Instituttet A/S                                         *
//* eu.abc4trust.pabce.1.0                                            *
//* (C) Copyright IBM Corp. 2012. All Rights Reserved.                *
//* (C) Copyright Miracle A/S, Denmark. 2012. All Rights Reserved.    *
//* (C) Copyright Alexandra Instituttet A/S, Denmark. 2012. All       *
//* Rights Reserved.                                                  *
//* US Government Users Restricted Rights - Use, duplication or       *
//* disclosure restricted by GSA ADP Schedule Contract with IBM Corp. *
//*/**/****************************************************************

package eu.abc4trust.ri.service.verifier;

import java.io.File;
import java.io.FilenameFilter;
import java.math.BigInteger;

import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.xml.bind.JAXBElement;

import eu.abc4trust.guice.ProductionModule;
import eu.abc4trust.guice.ProductionModuleFactory.CryptoEngine;
import eu.abc4trust.ri.servicehelper.AbstractHelper;
import eu.abc4trust.ri.servicehelper.issuer.IssuanceHelper;
import eu.abc4trust.ri.servicehelper.user.UserHelper;
import eu.abc4trust.ri.servicehelper.verifier.VerificationHelper;
import eu.abc4trust.xml.ObjectFactory;
import eu.abc4trust.xml.PresentationPolicyAlternatives;
import eu.abc4trust.xml.PresentationToken;
import eu.abc4trust.xml.util.XmlUtils;

/**
 */
@Path("/")
public class VerificationService {

    public static final boolean USE_KEYS_FROM_ISSUER_TEST = true;

    public VerificationService() throws Exception {
        System.out.println("VerificationService");
    }

    private static CryptoEngine clientEngine = null;

    private void initVerificationHelper(CryptoEngine cryptoEngine, CryptoEngine clientEngine) {
        if (!USE_KEYS_FROM_ISSUER_TEST) {
            throw new IllegalStateException("integration-test-verifier relies on keys generated by integration-test-issuer");
        }

        if (cryptoEngine == CryptoEngine.BRIDGED) {
            VerificationService.clientEngine = clientEngine;
        } else {
            VerificationService.clientEngine = cryptoEngine;
        }

        try {
            VerificationHelper.resetInstance();

            System.out.println("VerificationHelper - try to - init!");

            String uprovePath;
            String fileStoragePrefix; // = "issuer_";
            if (new File("target").exists()) {
                fileStoragePrefix = "target/verifier_";
                uprovePath =
                        "./../../../../dotNet/ABC4Trust-UProve_dotNET_WebServiceServer/ABC4Trust-UProve/bin/Release";
            } else {
                fileStoragePrefix = "integration-test-verifier/target/verifier_";
                uprovePath =
                        "./../../../dotNet/ABC4Trust-UProve_dotNET_WebServiceServer/ABC4Trust-UProve/bin/Release";
            }
            if(System.getProperty("PathToUProveExe",null) == null) {
                System.setProperty("PathToUProveExe", uprovePath);
            }


            String issuerFileStorageFolder; // = "issuer_";
            if (new File("../integration-test-issuer/target/").exists()) {
                System.out.println("use storage in ../integration-test-issuer/target... (MVN from project)");
                issuerFileStorageFolder = "../integration-test-issuer/target/";
            } else {
                issuerFileStorageFolder = "integration-test-issuer/target/";
                System.out.println("use storage in integration-test-issuer/target... (MVN from root)");
            }
            File folder = new File(issuerFileStorageFolder);
            File[] issuerParamsFileList = folder.listFiles(new FilenameFilter() {

                @Override
                public boolean accept(File arg0, String arg1) {
                    if (arg1.startsWith("issuer_issuer_params_")) {
                        System.out.println("Test : " + arg1);
                        if (arg1.indexOf("patras") != -1) {
                            System.out.println("- reject 'patras'" + arg1);
                            return false;
                        }
                        return true;
                    } else {
                        return false;
                    }
                }
            });
            System.out.println("issuerparams files : " + issuerParamsFileList + " : "
                    + issuerParamsFileList.length);
            String[] issuerParamsResourceList = new String[issuerParamsFileList.length];
            for (int ix = 0; ix < issuerParamsFileList.length; ix++) {
                System.out.println(" - " + issuerParamsFileList[ix].getAbsolutePath());
                issuerParamsResourceList[ix] = issuerParamsFileList[ix].getAbsolutePath();
            }

            String[] credSpecResourceList =
              { "/eu/abc4trust/sampleXml/credspecs/credentialSpecificationSimpleIdentitycard.xml"
                , "/eu/abc4trust/sampleXml/soderhamn/credentialSpecificationSoderhamnSchool.xml"
                , "/eu/abc4trust/sampleXml/soderhamn/credentialSpecificationSoderhamnSubject.xml"
                , "/eu/abc4trust/sampleXml/patras/credentialSpecificationPatrasUniversity.xml"
                , "/eu/abc4trust/sampleXml/patras/credentialSpecificationPatrasCourse.xml"
              };

            String[] presentationPoliciesResouces =
                {"/eu/abc4trust/sampleXml/patras/presentationPolicyPatrasCourseEvaluation.xml",
                "/eu/abc4trust/sampleXml/patras/presentationPolicyPatrasUniversityLogin.xml"};

            String[] inspectorPublicKeyResourceList = new String[0];

            VerificationHelper.initInstance(cryptoEngine, issuerParamsResourceList, credSpecResourceList, inspectorPublicKeyResourceList, 
                    fileStoragePrefix, presentationPoliciesResouces);

            // pseudonym values

            System.out.println("IssuanceHelper - done!");
        } catch (Exception e) {
            System.out.println("Create Domain FAILED " + e);
            e.printStackTrace();
        }
    }



    ObjectFactory of = new ObjectFactory();

    @GET()
    @Path("/init/{CryptoEngine}")
    @Produces(MediaType.TEXT_PLAIN)
    public String init(@PathParam("CryptoEngine") final String cryptoEngineName,
            final @QueryParam("clientEngine") CryptoEngine clientEngine) {
        System.out.println("issuance service.init : " + cryptoEngineName + " - client : "
                + clientEngine);
        CryptoEngine cryptoEngine = CryptoEngine.valueOf(cryptoEngineName);
        this.initVerificationHelper(cryptoEngine, clientEngine);
        return "OK";
    }

    @GET()
    @Path("/reset")
    @Produces(MediaType.TEXT_PLAIN)
    public String reset() {
        System.out.println("Service Reset");
        IssuanceHelper.resetInstance();
        UserHelper.resetInstance();
        VerificationHelper.resetInstance();

        return "OK";
    }


    static String appData = null; // "AppData";
    static byte[] nonce;

    @Path("/policy/{PolicyId}")
    @GET()
    @Produces({MediaType.TEXT_XML})
    public JAXBElement<PresentationPolicyAlternatives> getPolicy(
            @PathParam("PolicyId") final String policyId) throws Exception {

        System.out.println("VerificationService - Policy - with Policy : " + policyId);

        nonce = VerificationHelper.getInstance().generateNonce();

        PresentationPolicyAlternatives ppa =
                VerificationHelper.getInstance().createPresentationPolicy(policyId, nonce, appData);

        // System.out.println("PresentationPolicyAlternatives : " + ppa);
        // System.out.println("- original size of application data : " +
        // ppa.getPresentationPolicy().get(0).getMessage().getApplicationData().getContent().size());

        return this.of.createPresentationPolicyAlternatives(ppa);
    }

    @Path("/verify/{PolicyId}")
    @POST()
    @Produces({MediaType.TEXT_XML})
    public Response verifyPolicy(@PathParam("PolicyId") final String policyId,
            final PresentationToken presentationToken) throws Exception {
        System.out.println("VerificationService - Verify - with Policy : " + policyId);
        try {
            System.out.println(" - XML : "
                    + XmlUtils.toXml(this.of.createPresentationToken(presentationToken), false));
        } catch (Exception e) {
            System.out.println(" - XML ERROR ??? : " + e);
        }

        if("presentationPolicyPatrasUniversityLogin.xml".equals(policyId)) {
            // get pseudonym value !
            BigInteger mustMatch = null;
            BigInteger presentedPseudonymValue = AbstractHelper.getPseudonymValue(presentationToken, "urn:patras:registration"); 
            if(clientEngine == CryptoEngine.IDEMIX) {
                mustMatch = IssuanceHelper.TEST_CONSTANTS.patrasPseudonymValue_Idemix;
            } else { 
                mustMatch = IssuanceHelper.TEST_CONSTANTS.patrasPseudonymValue_UProve;
            }
            if(mustMatch.equals(presentedPseudonymValue)) {
                System.out.println("Correct PseudonymValue presented");
            } else {
                throw new IllegalStateException(clientEngine.toString() + " pseudonym expected with value " + mustMatch + " - got : " + presentedPseudonymValue);
            }
            
            // get cryptoengine
            ProductionModule.CryptoEngine usedUserCryptoEngine = AbstractHelper.getCryptoEngineForPseudonym(presentationToken, "urn:patras:registration");
            System.out.println("usedUserCryptoEngine : " + usedUserCryptoEngine);
            if(clientEngine == AbstractHelper.oldCryptoEngineToNewCryptoEngine(usedUserCryptoEngine)) {
                System.out.println("- Correct User ABCE CryptoEngine used " + usedUserCryptoEngine);
            } else {
                throw new IllegalStateException(clientEngine.toString() + " expected to be used by User - but seems to be : " + usedUserCryptoEngine);
            }
        }

        try {
            boolean ok =
                    VerificationHelper.getInstance().verifyToken(policyId, nonce, appData, presentationToken);

            if (ok) {
                System.out.println(" - verify OK");
                return Response.status(202).build();
            } else {
                System.out.println(" - verify FAILED");
                return Response.status(406).build();
            }
        } catch (Exception e) {
            System.err.println("- verify Exception");
            e.printStackTrace();
            throw e;
        }
        
    }
}
